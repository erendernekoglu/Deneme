    1  
import React, { useState } from 'react';
    2  
import { Users, Calendar, Settings, BarChart3, User, LogOut, Building2, Moon, Sun } from 'lucide-react';
    3  
import AdminDashboard from './components/AdminDashboard';
    4  
import EmployeeView from './components/EmployeeView';
    5  
import EmployeesPage from './components/EmployeesPage';
    6  
import ShiftTemplatesPage from './components/ShiftTemplatesPage';
    7  
import SchedulesPage from './components/SchedulesPage';
    8  
import DepartmentsPage from './components/DepartmentsPage';
    9  
import ReportsPage from './components/ReportsPage';
   10  
import AvailabilityRequestsPage from './components/AvailabilityRequestsPage';
   11  
import SwapRequestsPage from './components/SwapRequestsPage';
   12  
import type { UserRole, Employee, ShiftTemplate, ShiftAssignment, Department } from './types';
   13  
import { api } from './lib/api';
   14  
import type { Department as ApiDepartment } from './types/api';
   15  
import Login from './pages/Login';
   16  

   17  
// Mock data (UI tipleri)
   18  
const mockDepartments: Department[] = [
   19  
  { id: '1', name: 'AR-GE Birimi',     color: '#3B82F6', description: 'Araştırma ve Geliştirme' },
   20  
  { id: '2', name: 'Muhasebe Birimi',  color: '#10B981', description: 'Mali İşler ve Muhasebe' },
   21  
  { id: '3', name: 'Yönetim Birimi',   color: '#8B5CF6', description: 'Üst Düzey Yönetim' },
   22  
  { id: '4', name: 'İnsan Kaynakları', color: '#F59E0B', description: 'İK ve Personel İşleri' },
   23  
];
   24  

   25  
const mockEmployees: Employee[] = [
   26  
  { id: '1', name: 'Ahmet Yılmaz',  email: 'ahmet@firma.com',  position: 'Yazılım Geliştirici', phone: '0555 123 4567', departmentId: '1' },
   27  
  { id: '2', name: 'Fatma Demir',   email: 'fatma@firma.com',  position: 'Mali Müşavir',        phone: '0555 234 5678', departmentId: '2' },
   28  
  { id: '3', name: 'Mehmet Kara',   email: 'mehmet@firma.com', position: 'Genel Müdür',         phone: '0555 345 6789', departmentId: '3' },
   29  
  { id: '4', name: 'Ayşe Öz',       email: 'ayse@firma.com',   position: 'İK Uzmanı',           phone: '0555 456 7890', departmentId: '4' },
   30  
  { id: '5', name: 'Can Özkan',     email: 'can@firma.com',    position: 'Araştırmacı',         phone: '0555 567 8901', departmentId: '1' },
   31  
  { id: '6', name: 'Zeynep Kaya',   email: 'zeynep@firma.com', position: 'Muhasebeci',          phone: '0555 678 9012', departmentId: '2' },
   32  
];
   33  

   34  
const mockShiftTemplates: ShiftTemplate[] = [
   35  
  { id: '1', name: 'Gündüz',       code: 'G', startTime: '08:00', endTime: '16:00', color: '#FEF3C7', departmentId: '1' },
   36  
  { id: '2', name: 'Akşam',        code: 'A', startTime: '16:00', endTime: '00:00', color: '#FED7AA', departmentId: '1' },
   37  
  { id: '3', name: 'Gece',         code: 'N', startTime: '00:00', endTime: '08:00', color: '#E9D5FF', departmentId: '1' },
   38  
  { id: '4', name: 'Normal Mesai', code: 'M', startTime: '09:00', endTime: '17:00', color: '#DBEAFE', departmentId: '2' },
   39  
  { id: '5', name: 'Esnek Mesai',  code: 'E', startTime: '10:00', endTime: '18:00', color: '#D1FAE5', departmentId: '3' },
   40  
  { id: '6', name: 'Yarım Gün',    code: 'Y', startTime: '09:00', endTime: '13:00', color: '#FEE2E2', departmentId: '4' },
   41  
];
   42  

   43  
const mockShiftAssignments: ShiftAssignment[] = [
   44  
  { id: '1', employeeId: '1', date: '2024-01-15', shiftTemplateId: '1' },
   45  
  { id: '2', employeeId: '1', date: '2024-01-16', shiftTemplateId: '1' },
   46  
  { id: '3', employeeId: '2', date: '2024-01-15', shiftTemplateId: '4' },
   47  
  { id: '4', employeeId: '3', date: '2024-01-15', shiftTemplateId: '5' },
   48  
  { id: '5', employeeId: '4', date: '2024-01-15', shiftTemplateId: '6' },
   49  
  { id: '6', employeeId: '5', date: '2024-01-15', shiftTemplateId: '2' },
   50  
  { id: '7', employeeId: '6', date: '2024-01-15', shiftTemplateId: '4' },
   51  
];
   52  

   53  
type AuthUser = { id: string; email: string; fullName: string; role: 'ADMIN' | 'EMPLOYEE' } | null;
   54  

   55  
function decodeJwt(token: string): any | null {
   56  
  try {
   57  
    const payload = token.split('.')[1];
   58  
    const decoded = JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')));
   59  
    return decoded;
   60  
  } catch {
   61  
    return null;
   62  
  }
   63  
}
   64  

   65  
function App() {
   66  
  const [authUser, setAuthUser] = useState<AuthUser>(() => {
   67  
    try {
   68  
      const t = localStorage.getItem('token');
   69  
      if (!t) return null;
   70  
      const p = decodeJwt(t);
   71  
      if (p && (p.role === 'ADMIN' || p.role === 'EMPLOYEE') && p.sub) {
   72  
        return { id: String(p.sub), email: p.email, fullName: p.fullName ?? p.email, role: p.role };
   73  
      }
   74  
    } catch {}
   75  
    return null;
   76  
  });
   77  
  const currentUser: UserRole = authUser?.role === 'ADMIN' ? 'admin' : 'employee';
   78  
  const [activeTab, setActiveTab] = useState('dashboard');
   79  
  const [selectedDepartment, setSelectedDepartment] = useState<string>('all');
   80  
  const [theme, setTheme] = useState<'light' | 'dark'>(() => {
   81  
    if (typeof window === 'undefined') return 'light';
   82  
    const stored = localStorage.getItem('theme');
   83  
    if (stored === 'light' || stored === 'dark') return stored as 'light' | 'dark';
   84  
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
   85  
  });
   86  

   87  
  // UI katmanındaki mock state (AdminDashboard bu state'i kullanıyor)
   88  
  const [departments, setDepartments] = useState<Department[]>(mockDepartments);
   89  
  const [employees] = useState<Employee[]>(mockEmployees);
   90  
  const [shiftTemplates] = useState<ShiftTemplate[]>(mockShiftTemplates);
   91  
  const [shiftAssignments] = useState<ShiftAssignment[]>(mockShiftAssignments);
   92  

   93  
  React.useEffect(() => {
   94  
    document.documentElement.classList.toggle('dark', theme === 'dark');
   95  
    try { localStorage.setItem('theme', theme); } catch {}
   96  
  }, [theme]);
   97  

   98  
  const toggleTheme = () => setTheme((t) => (t === 'dark' ? 'light' : 'dark'));
   99  

  100  
  const adminMenuItems = [
  101  
    { id: 'dashboard',  label: 'Gösterge Paneli',     icon: BarChart3 },
  102  
    { id: 'departments',label: 'Birimler',             icon: Building2 },
  103  
    { id: 'employees',  label: 'Çalışanlar',           icon: Users },
  104  
    { id: 'templates',  label: 'Vardiya Şablonları',   icon: Settings },
  105  
    { id: 'schedules',  label: 'Programlar',           icon: Calendar },
  106  
    { id: 'availability', label: 'Müsaitlik',          icon: User },
  107  
    { id: 'reports',    label: 'Raporlar',             icon: BarChart3 },
  108  
  ];
  109  

  110  
  const renderAdminContent = () => {
  111  
    switch (activeTab) {
  112  
      case 'dashboard':
  113  
        return (
  114  
          <AdminDashboard
  115  
            departments={departments}
  116  
            employees={employees}
  117  
            shiftTemplates={shiftTemplates}
  118  
            shiftAssignments={shiftAssignments}
  119  
            selectedDepartment={selectedDepartment}
  120  
            setSelectedDepartment={setSelectedDepartment}
  121  
            onNavigate={(tab) => setActiveTab(tab)}
  122  
          />
  123  
        );
  124  
      case 'departments':
  125  
        return <DepartmentsPage departments={departments} setDepartments={setDepartments} />;
  126  
      case 'employees':
  127  
        return (
  128  
          <EmployeesPage
  129  
            departments={departments}
  130  
            selectedDepartment={selectedDepartment}
  131  
            setSelectedDepartment={setSelectedDepartment}
  132  
          />
  133  
        );
  134  
      case 'templates':
  135  
        return (
  136  
          <ShiftTemplatesPage
  137  
            departments={departments}
  138  
            selectedDepartment={selectedDepartment}
  139  
            setSelectedDepartment={setSelectedDepartment}
  140  
          />
  141  
        );
  142  
      case 'schedules':
  143  
        return (
  144  
          <SchedulesPage
  145  
            selectedDepartment={selectedDepartment}
  146  
            setSelectedDepartment={setSelectedDepartment}
  147  
            departments={departments}
  148  
          />
  149  
        );
  150  
      case 'reports':
  151  
        return (
  152  
          <ReportsPage
  153  
            selectedDepartment={selectedDepartment}
  154  
            departments={departments}
  155  
          />
  156  
        );
  157  
      case 'availability':
  158  
        return (
  159  
          <AvailabilityRequestsPage
  160  
            selectedDepartment={selectedDepartment}
  161  
            departments={departments}
  162  
          />
  163  
        );
  164  
      case 'swaps':
  165  
        return (
  166  
          <SwapRequestsPage />
  167  
        );
  168  
      default:
  169  
        return (
  170  
          <AdminDashboard
  171  
            departments={departments}
  172  
            employees={employees}
  173  
            shiftTemplates={shiftTemplates}
  174  
            shiftAssignments={shiftAssignments}
  175  
            selectedDepartment={selectedDepartment}
  176  
            setSelectedDepartment={setSelectedDepartment}
  177  
            onNavigate={(tab) => setActiveTab(tab)}
  178  
          />
  179  
        );
  180  
    }
  181  
  };
  182  

  183  
  // Global filtre için birimleri backend'den yükle (başarısız olursa mock kalır)
  184  
  React.useEffect(() => {
  185  
    (async () => {
  186  
      try {
  187  
        const depts = await api.get<ApiDepartment[]>('/departments');
  188  
        const mapped = depts.map((d) => ({
  189  
          id: d.id,
  190  
          name: d.name,
  191  
          color: d.color ?? '#3B82F6',
  192  
          description: d.description ?? '',
  193  
        }));
  194  
        // Ensure 'Genel' option exists in selectors (synthetic if not in DB)
  195  
        const hasGeneral = mapped.some((x) => (x.name || '').toLowerCase() === 'genel' || (x.name || '').toLowerCase() === 'general');
  196  
        const finalList = hasGeneral
  197  
          ? mapped
  198  
          : [{ id: '__GENERAL__', name: 'Genel', color: '#3B82F6', description: 'Genel (tüm birimler)' }, ...mapped];
  199  
        setDepartments(finalList);
  200  
      } catch {
  201  
        // sessizce mock veride kal
  202  
      }
  203  
    })();
  204  
  }, []);
  205  

  206  
  // ---------- DEĞİŞTİRİLEN KISIM: Auth akışı ----------
  207  
  // 1) Giriş yapılmamışsa Login göster
  208  
  if (!authUser) {
  209  
    return (
  210  
      <Login
  211  
        onSuccess={(res) => {
  212  
          setAuthUser(res.user);
  213  
        }}
  214  
      />
  215  
    );
  216  
  }
  217  

  218  
  // 2) Çalışan ise EmployeeView göster
  219  
  if (currentUser === 'employee') {
  220  
    return <EmployeeView />;
  221  
  }
  222  
  // ----------------------------------------------------
  223  

  224  
  // 3) Admin ise panel
  225  
  return (
  226  
    <div className="flex h-screen bg-gray-50 dark:bg-gray-900 dark:text-gray-100">
  227  
      {/* Sidebar */}
  228  
      <div className="w-64 bg-white dark:bg-gray-800 shadow-lg relative">
  229  
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
  230  
          <div className="flex items-start justify-between">
  231  
            <div>
  232  
              <h1 className="text-xl font-bold text-gray-800 dark:text-gray-100">Vardiya Yönetimi</h1>
  233  
              <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">Admin Paneli</p>
  234  
            </div>
  235  
            <button
  236  
              onClick={toggleTheme}
  237  
              className="inline-flex items-center gap-2 px-2 py-1 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 shadow hover:bg-gray-50 dark:hover:bg-gray-600"
  238  
              aria-label="Tema Değiştir"
  239  
              title="Tema Değiştir"
  240  
            >
  241  
              {theme === 'dark' ? <Sun size={14} /> : <Moon size={14} />}
  242  
            </button>
  243  
          </div>
  244  
          <div className="mt-4">
  245  
            <label className="block text-xs font-medium text-gray-600 dark:text-gray-300 mb-1">
  246  
              Birim Filtresi
  247  
            </label>
  248  
            <select
  249  
              value={selectedDepartment}
  250  
              onChange={(e) => setSelectedDepartment(e.target.value)}
  251  
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
  252  
            >
  253  
              <option value="all">Tüm Birimler</option>
  254  
              {departments.map((dept) => (
  255  
                <option key={dept.id} value={dept.id}>
  256  
                  {dept.name}
  257  
                </option>
  258  
              ))}
  259  
            </select>
  260  
          </div>
  261  
        </div>
  262  

  263  
        <nav className="mt-6">
  264  
          {adminMenuItems.map((item) => {
  265  
            const Icon = item.icon;
  266  
            const active = activeTab === item.id;
  267  
            return (
  268  
              <button
  269  
                key={item.id}
  270  
                onClick={() => setActiveTab(item.id)}
  271  
                className={`w-full flex items-center px-6 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
  272  
                  active ? 'bg-blue-50 dark:bg-blue-900/20 border-r-2 border-blue-500 text-blue-700 dark:text-blue-300' : 'text-gray-700 dark:text-gray-200'
  273  
                }`}
  274  
              >
  275  
                <Icon size={20} className="mr-3" />
  276  
                {item.label}
  277  
              </button>
  278  
            );
  279  
          })}
  280  
          {/* Extra menu item for Swap Requests */}
  281  
          <button
  282  
            key="swaps"
  283  
            onClick={() => setActiveTab('swaps')}
  284  
            className={`w-full flex items-center px-6 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
  285  
              activeTab === 'swaps' ? 'bg-blue-50 dark:bg-blue-900/20 border-r-2 border-blue-500 text-blue-700 dark:text-blue-300' : 'text-gray-700 dark:text-gray-200'
  286  
            }`}
  287  
          >
  288  
            <Users size={20} className="mr-3" />
  289  
            Değişim
  290  
          </button>
  291  
        </nav>
  292  

  293  
        <div className="absolute bottom-0 w-64 p-6 border-t border-gray-200 dark:border-gray-700">
  294  
          <div className="flex items-center">
  295  
            <div className="w-8 h-8 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center">
  296  
              <User size={16} />
  297  
            </div>
  298  
            <div className="ml-3">
  299  
              <p className="text-sm font-medium text-gray-800 dark:text-gray-100">Admin Kullanıcısı</p>
  300  
              <p className="text-xs text-gray-600 dark:text-gray-300">Yönetici</p>
  301  
            </div>
  302  
            <button
  303  
              onClick={() => {
  304  
                try { localStorage.removeItem('token'); } catch {}
  305  
                setAuthUser(null);
  306  
              }}
  307  
              className="ml-auto text-gray-400 dark:text-gray-300 hover:text-gray-600 dark:hover:text-gray-200"
  308  
              title="Çıkış"
  309  
              aria-label="Çıkış"
  310  
            >
  311  
              <LogOut size={16} />
  312  
            </button>
  313  
          </div>
  314  
        </div>
  315  
      </div>
  316  

  317  
      {/* Main Content */}
  318  
      <div className="flex-1 overflow-auto">{renderAdminContent()}</div>
  319  
    </div>
  320  
  );
  321  
}
  322  

  323  
export default App;
